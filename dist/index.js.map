{"version":3,"sources":["../src/index.ts","../src/internal/utils/internal.ts","../src/utils/get-url-from-resource.ts"],"names":["mergeObjects","target","source","result","key","targetValue","sourceValue","createSnapshot","queryClient","keys","snapshot","prev","queryKey","removeFirstAndLastSlash","path","eventEmitter","EventEmitter","undoEventEmitter","type","callback","isUndo","getUrlFromResource","resource","ensureTrailingSlash","url","_"],"mappings":"AAAA,whCAAc,4GCEW,SAoBTA,CAAAA,CAAmCC,CAAAA,CAAeC,CAAAA,CAAoB,CACpF,IAAMC,CAAAA,CAAc,CAAE,GAAGF,CAAO,CAAA,CAEhC,EAAA,CAAIA,EAAAA,WAAkB,MAAA,EAAUC,EAAAA,WAAkB,MAAA,CAAA,CAChD,GAAA,CAAA,IAAWE,EAAAA,GAAOF,CAAAA,CAChB,EAAA,CAAIE,EAAAA,GAAOH,CAAAA,CAAQ,CACjB,IAAMI,CAAAA,CAAeJ,CAAAA,CAAeG,CAAG,CAAA,CACjCE,CAAAA,CAAcJ,CAAAA,CAAOE,CAAG,CAAA,CAEX,OAAOC,CAAAA,EAAgB,OAAOC,CAAAA,EAAAA,CAC1C,KAAA,CAAM,OAAA,CAAQD,CAAW,CAAA,EAAK,KAAA,CAAM,OAAA,CAAQC,CAAW,CAAA,EACxDD,CAAAA,GAAgB,IAAA,EAAQ,CAAC,KAAA,CAAM,OAAA,CAAQA,CAAW,CAAA,EAAK,OAAOA,CAAAA,EAAgB,QAAA,EAC7E,CAAC,KAAA,CAAM,OAAA,CAAQC,CAAW,CAAA,EAAK,OAAOA,CAAAA,EAAgB,QAAA,EACvD,OAAOD,CAAAA,EAAgB,QAAA,EAAY,OAAOC,CAAAA,EAAgB,QAAA,CAAA,EAAA,CAG1D,OAAOD,CAAAA,EAAgB,QAAA,EAAYA,CAAAA,GAAgB,IAAA,EAAQ,CAAC,KAAA,CAAM,OAAA,CAAQA,CAAW,CAAA,CACvFF,CAAAA,CAAOC,CAAG,CAAA,CAAIJ,CAAAA,CAAaK,CAAAA,CAAaC,CAAiC,CAAA,CAEzEH,CAAAA,CAAOC,CAAG,CAAA,CAAIE,CAAAA,CAGpB,CAAA,CAIJ,OAAOH,CACT,CASO,IAAMI,CAAAA,CAAiB,KAAA,CAAOC,CAAAA,CAA0BC,CAAAA,CAAAA,EAAkB,CAC/E,IAAMC,CAAAA,CAAqBD,CAAAA,CAAK,MAAA,CAC9B,CAACE,CAAAA,CAAMC,CAAAA,CAAAA,EAAaD,CAAAA,CAAK,MAAA,CAAOH,CAAAA,CAAY,cAAA,CAAe,CAAE,QAAA,CAAAI,CAAS,CAAC,CAAC,CAAA,CACxE,CAAC,CACH,CAAA,CAGA,OAAA,MAAM,OAAA,CAAQ,GAAA,CACZF,CAAAA,CAAS,GAAA,CAAI,CAAC,CAACE,CAAQ,CAAA,CAAA,EAAMJ,CAAAA,CAAY,aAAA,CAAc,CAAE,QAAA,CAAAI,CAAS,CAAC,CAAC,CACtE,CAAA,CAEOF,CACT,CAAA,CAQO,SAASG,CAAAA,CAAwBC,CAAAA,CAAsB,CAC5D,OAAOA,CAAAA,CACJ,OAAA,CAAQ,MAAA,CAAQ,EAAE,CAAA,CAClB,OAAA,CAAQ,MAAA,CAAQ,EAAE,CACvB,CAEA,IAAMC,CAAAA,CAAe,IAAIC,uBAAAA,CAEZC,CAAAA,CAAmB,CAQ9B,IAAA,CAAM,CAACC,CAAAA,CAAaC,CAAAA,CAAAA,EAAwC,CAC1DJ,CAAAA,CAAa,IAAA,CAAKG,CAAAA,CAAMC,CAAQ,CAClC,CAAA,CAOA,IAAA,CAAM,CAACD,CAAAA,CAAaE,CAAAA,CAAAA,EAAoB,CACtCL,CAAAA,CAAa,IAAA,CAAKG,CAAAA,CAAME,CAAM,CAChC,CACF,CAAA,CClFO,IAAMC,CAAAA,CAAqB,CAAuBC,CAAAA,CAA2BC,CAAAA,CAAAA,EAAkC,CACpH,IAAMC,CAAAA,CAAMX,CAAAA,CAAwBS,CAAAA,CAAS,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAY,CAACG,CAAAA,CAAGrB,CAAAA,CAAAA,EACjEkB,CAAAA,CAAS,MAAA,CAAOlB,CAAG,CAAA,CAAG,QAAA,CAAS,CACvC,CAAC,CAAA,CAEF,OAAOmB,CAAAA,CAAsB,CAAA,EAAA","file":"/home/lven/RQ-lib/react-query-manager/dist/index.js","sourcesContent":["export * from '@tanstack/react-query';\n\nexport * from './hooks/use-get-list';\nexport * from './hooks/use-get-infinite-list';\nexport * from './hooks/use-get-one';\nexport * from './hooks/use-delete';\nexport * from './hooks/use-update';\nexport * from './hooks/use-create';\nexport * from './hooks/use-data-query';\nexport * from './hooks/use-data-mutate';\n\nexport * from './components/RQWrapper';\n\nexport * from './utils/fetcher';\nexport * from './utils/custom-error';\nexport * from './utils/toast';\nexport * from './utils/get-url-from-resource';\nexport * from './utils/queries';\n\nexport * from './type';\n","/* eslint-disable no-restricted-syntax */\nimport type { QueryClient } from '@tanstack/react-query';\nimport EventEmitter from 'eventemitter3';\nimport { Snapshot } from '../type';\n\n/**\n * Recursively merges two objects together, ensuring that only fields that exist\n * and match in type in the target object are merged from the source object.\n *\n * @template TData - The type of the target object.\n * @param target - The target object that will be merged into.\n * @param source - The source object containing values to merge.\n * Only properties that exist in the target object and have matching types will be merged.\n *\n * @returns A new object with the merged values from the target and source objects.\n *\n * @example\n * const target = { id: '1', name: 'Test' };\n * const source = { id: '1', name: 'Test 2', other: 'Ignored' };\n * const result = mergeObjects(target, source);\n * ---> result: { id: '1', name: 'Test 2' }\n */\nexport function mergeObjects<TData extends object>(target: TData, source: any): TData {\n  const result: any = { ...target };\n\n  if (target instanceof Object && source instanceof Object) {\n    for (const key in source) {\n      if (key in target) {\n        const targetValue = (target as any)[key];\n        const sourceValue = source[key];\n\n        const isSameType = typeof targetValue === typeof sourceValue\n          && ((Array.isArray(targetValue) && Array.isArray(sourceValue))\n          || (targetValue !== null && !Array.isArray(targetValue) && typeof targetValue === 'object'\n            && !Array.isArray(sourceValue) && typeof sourceValue === 'object')\n          || (typeof targetValue !== 'object' && typeof sourceValue !== 'object'));\n\n        if (isSameType) {\n          if (typeof targetValue === 'object' && targetValue !== null && !Array.isArray(targetValue)) {\n            result[key] = mergeObjects(targetValue, sourceValue as typeof targetValue);\n          } else {\n            result[key] = sourceValue;\n          }\n        }\n      }\n    }\n  }\n\n  return result as TData;\n}\n\n/**\n * Creates a snapshot of the current data in the cache.\n *\n * @param queryClient The query client that contains the data to be snapshotted.\n * @param keys The keys to be snapshotted.\n * @returns A snapshot of the current data in the cache.\n */\nexport const createSnapshot = async (queryClient: QueryClient, keys: any[][]) => {\n  const snapshot: Snapshot = keys.reduce(\n    (prev, queryKey) => prev.concat(queryClient.getQueriesData({ queryKey })),\n    [] as any,\n  );\n\n  // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n  await Promise.all(\n    snapshot.map(([queryKey]) => queryClient.cancelQueries({ queryKey })),\n  );\n\n  return snapshot;\n};\n\n/**\n * Removes leading and trailing slashes from the given string.\n *\n * @param path The string to remove slashes from.\n * @return The string with leading and trailing slashes removed.\n */\nexport function removeFirstAndLastSlash(path: string): string {\n  return path\n    .replace(/^\\/+/, '')\n    .replace(/\\/+$/, '');\n}\n\nconst eventEmitter = new EventEmitter();\n\nexport const undoEventEmitter = {\n  /**\n   * Listens for the next 'end' event and then removes the listener.\n   *\n   * @param type The type of event to listen for. Currently only 'end' is supported.\n   * @param callback The callback function to be called when the event is emitted. The callback will receive a boolean indicating whether the event was triggered by an undo action.\n   * @return A function that can be called to remove the listener.\n   */\n  once: (type: 'end', callback: (isUndo: boolean) => void) => {\n    eventEmitter.once(type, callback);\n  },\n  /**\n   * Emits an 'end' event, which is used to let any registered callbacks know that an undo/redo action has completed.\n   *\n   * @param type The type of event to emit. Currently only 'end' is supported.\n   * @param isUndo A boolean indicating whether the event was triggered by an undo action.\n   */\n  emit: (type: 'end', isUndo: boolean) => {\n    eventEmitter.emit(type, isUndo);\n  },\n};\n","import { Resource } from '../type';\nimport { removeFirstAndLastSlash } from '../internal/utils/internal';\n\n/**\n * Takes a `Resource` object and returns its path as a string,\n * with any path parameters replaced with their corresponding values.\n * Optionally, it can ensure that the returned URL has a trailing slash.\n *\n * @template TPath - A string literal representing the path template with placeholders.\n *\n * @param {Resource<TPath>} resource - The `Resource` object containing the path and parameters.\n * @param {boolean} ensureTrailingSlash - If `true`, the returned URL will have a trailing slash.\n *\n * @returns {string} The URL with all placeholders replaced by the corresponding values from `params`.\n *\n * @example\n * const resource = {\n *   path: 'users/{id}/messages',\n *   params: { id: 1 },\n * };\n *\n * getUrlFromResource(resource, false); // 'users/1/messages'\n * getUrlFromResource(resource, true);  // 'users/1/messages/'\n */\nexport const getUrlFromResource = <TPath extends string>(resource: Resource<TPath>, ensureTrailingSlash?: boolean) => {\n  const url = removeFirstAndLastSlash(resource.path.replace(/{(\\w+)}/g, (_, key: keyof Resource<TPath>['params']) => {\n    return resource.params[key]!.toString();\n  }));\n\n  return ensureTrailingSlash ? `${url}/` : url;\n};\n"]}