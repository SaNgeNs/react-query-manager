{"version":3,"sources":["../src/index.ts","../src/internal/utils/remove-first-and-last-slash.ts","../src/utils/get-url-from-resource.ts"],"names":["removeFirstAndLastSlash","path","getUrlFromResource","resource","ensureTrailingSlash","url","_","key"],"mappings":"AAAA,whCAAc,SCMEA,CAAAA,CAAwBC,CAAAA,CAAsB,CAC5D,OAAOA,CAAAA,CACJ,OAAA,CAAQ,MAAA,CAAQ,EAAE,CAAA,CAClB,OAAA,CAAQ,MAAA,CAAQ,EAAE,CACvB,CCcO,IAAMC,CAAAA,CAAqB,CAAuBC,CAAAA,CAA2BC,CAAAA,CAAAA,EAAkC,CACpH,IAAMC,CAAAA,CAAML,CAAAA,CAAwBG,CAAAA,CAAS,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAY,CAACG,CAAAA,CAAGC,CAAAA,CAAAA,EACjEJ,CAAAA,CAAS,MAAA,CAAOI,CAAG,CAAA,CAAG,QAAA,CAAS,CACvC,CAAC,CAAA,CAEF,OAAOH,CAAAA,CAAsB,CAAA,EAAA","file":"/home/lven/RQ-lib/react-query-manager/dist/index.js","sourcesContent":["export * from '@tanstack/react-query';\n\nexport * from './hooks/use-get-list';\nexport * from './hooks/use-get-infinite-list';\nexport * from './hooks/use-get-one';\nexport * from './hooks/use-delete';\nexport * from './hooks/use-update';\nexport * from './hooks/use-create';\nexport * from './hooks/use-data-query';\nexport * from './hooks/use-data-mutate';\n\nexport * from './components/RQWrapper';\n\nexport * from './utils/fetcher';\nexport * from './utils/custom-error';\nexport * from './utils/toast';\nexport * from './utils/get-url-from-resource';\nexport * from './utils/queries';\n\nexport * from './type';\n","/**\n * Removes leading and trailing slashes from the given string.\n *\n * @param path The string to remove slashes from.\n * @return The string with leading and trailing slashes removed.\n */\nexport function removeFirstAndLastSlash(path: string): string {\n  return path\n    .replace(/^\\/+/, '')\n    .replace(/\\/+$/, '');\n}\n","import { removeFirstAndLastSlash } from '../internal/utils/remove-first-and-last-slash';\nimport { Resource } from '../type';\n\n/**\n * Takes a `Resource` object and returns its path as a string,\n * with any path parameters replaced with their corresponding values.\n * Optionally, it can ensure that the returned URL has a trailing slash.\n *\n * @template TPath - A string literal representing the path template with placeholders.\n *\n * @param {Resource<TPath>} resource - The `Resource` object containing the path and parameters.\n * @param {boolean} ensureTrailingSlash - If `true`, the returned URL will have a trailing slash.\n *\n * @returns {string} The URL with all placeholders replaced by the corresponding values from `params`.\n *\n * @example\n * const resource = {\n *   path: 'users/{id}/messages',\n *   params: { id: 1 },\n * };\n *\n * getUrlFromResource(resource, false); // 'users/1/messages'\n * getUrlFromResource(resource, true);  // 'users/1/messages/'\n */\nexport const getUrlFromResource = <TPath extends string>(resource: Resource<TPath>, ensureTrailingSlash?: boolean) => {\n  const url = removeFirstAndLastSlash(resource.path.replace(/{(\\w+)}/g, (_, key: keyof Resource<TPath>['params']) => {\n    return resource.params[key]!.toString();\n  }));\n\n  return ensureTrailingSlash ? `${url}/` : url;\n};\n"]}